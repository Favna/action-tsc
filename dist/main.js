"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const exec_1 = require("@actions/exec");
const core_1 = require("@actions/core");
const github_1 = require("@actions/github");
const { GITHUB_TOKEN, GITHUB_SHA } = process.env;
const ACTION_NAME = 'TSC';
async function lint(data) {
    const annotations = [];
    const results = [...data.matchAll(/^([^()]+)\((\d+),(\d+)\): (error|warning) (.+): (.+)$/gm)];
    for (const res of results) {
        const [, path, line, column, severity, ruleId, message] = res;
        annotations.push({
            path,
            start_line: parseInt(line, 10),
            end_line: parseInt(line, 10),
            start_column: parseInt(column, 10),
            end_column: parseInt(column, 10),
            annotation_level: severity === 'error' ? 'failure' : 'warning',
            title: ruleId || ACTION_NAME,
            message
        });
    }
    return {
        conclusion: annotations.length ? 'success' : 'failure',
        output: {
            title: ACTION_NAME,
            summary: annotations.length ? 'Green lights' : 'TSC error',
            annotations
        }
    };
}
async function check(data) {
    const octokit = new github_1.GitHub(GITHUB_TOKEN);
    let currentSha;
    let info;
    if (github_1.context.issue && github_1.context.issue.number) {
        info = await octokit.graphql(`query($owner: String!, $name: String!, $prNumber: Int!) {
			repository(owner: $owner, name: $name) {
				pullRequest(number: $prNumber) {
					files(first: 100) {
						nodes {
							path
						}
					}
					commits(last: 1) {
						nodes {
							commit {
								oid
							}
						}
					}
				}
			}
		}`, {
            owner: github_1.context.repo.owner,
            name: github_1.context.repo.repo,
            prNumber: github_1.context.issue.number
        });
        currentSha = info.repository.pullRequest.commits.nodes[0].commit.oid;
    }
    else {
        info = await octokit.repos.getCommit({ owner: github_1.context.repo.owner, repo: github_1.context.repo.repo, ref: GITHUB_SHA });
        currentSha = GITHUB_SHA;
    }
    core_1.debug(`Commit: ${currentSha}`);
    let id;
    const jobName = core_1.getInput('job-name');
    if (jobName) {
        const checks = await octokit.checks.listForRef({
            ...github_1.context.repo,
            status: 'in_progress',
            ref: currentSha
        });
        const check = checks.data.check_runs.find(({ name }) => name.toLowerCase() === jobName.toLowerCase());
        if (check)
            id = check.id;
    }
    if (!id) {
        id = (await octokit.checks.create({
            ...github_1.context.repo,
            name: ACTION_NAME,
            head_sha: currentSha,
            status: 'in_progress',
            started_at: new Date().toISOString()
        })).data.id;
    }
    try {
        const { conclusion, output } = await lint(data);
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            completed_at: new Date().toISOString(),
            conclusion,
            output
        });
        core_1.debug(output.summary);
        if (conclusion === 'failure')
            core_1.setFailed(output.summary);
    }
    catch (error) {
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            conclusion: 'failure',
            completed_at: new Date().toISOString()
        });
        core_1.setFailed(error.message);
    }
}
async function run() {
    try {
        await exec_1.exec('node', [`${path_1.join(process.cwd(), 'node_modules/typescript/bin/tsc')}`, '--noEmit', '--noErrorTruncation', '--pretty', 'false'], {
            listeners: {
                stdout: async (data) => {
                    await check(data.toString());
                }
            }
        });
    }
    catch (error) {
        core_1.setFailed(error.message);
    }
}
run();
//# sourceMappingURL=data:application/json;base64,